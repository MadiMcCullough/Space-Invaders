import math
import random
import pygame
from pygame import mixer
from matplotlib import font_manager

def main():

    # Intialize the pygame
    pygame.init()

    # Set the game to full screen
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)

    # Background
    background = pygame.image.load('background.png')
    background = pygame.transform.scale(background, (screen.get_width(), screen.get_height()))

    # Sound
    def play_main_music():
        mixer.music.load("gf_themesong.wav")
        mixer.music.play(-1)
        mixer.music.set_volume(0.2)

    # Play intro music
    intro_music = mixer.Sound("intro_music.wav")
    intro_music.play()

    # Event to trigger main music
    def handle_music_events():
        for event in pygame.event.get():
            if event.type == pygame.USEREVENT + 1:
                play_main_music()

    # Display instructions before the game starts
    instructions_font = pygame.font.Font('freesansbold.ttf', 32)
    hoefler_font_path = font_manager.findfont("Hoefler Text")  # Find the path to Hoefler Text font
    hoefler_font = pygame.font.Font(hoefler_font_path, 32) if hoefler_font_path else instructions_font

    instructions_text = [
        ("Welcome to ", "Weirdmageddon!"),
        ("Use LEFT and RIGHT arrow keys to move.", ""),
        ("Press SPACE to shoot.", ""),
        ("Press any key to start the game.", "")
    ]

    def display_instructions():
        screen.fill((0, 0, 0))
        y_offset = (screen.get_height() - len(instructions_text) * 50) // 2  # Center vertically
        glitch_offset = 0  # Offset for glitch effect
        for line in instructions_text:
            if "Weirdmageddon" in line[1]:
                # Render "Weirdmageddon" with Hoefler Text font and add glitch effect
                text_surface1 = instructions_font.render(line[0], True, (255, 255, 255))
                text_surface2 = hoefler_font.render(line[1], True, (255, 0, 0))  # Red for glitch effect
                text_surface3 = hoefler_font.render(line[1], True, (0, 255, 0))  # Green for glitch effect
                text_surface4 = hoefler_font.render(line[1], True, (0, 0, 255))  # Blue for glitch effect

                text_rect1 = text_surface1.get_rect(center=(screen.get_width() // 2 - 120, y_offset))  # Adjusted position
                text_rect2 = text_surface2.get_rect(center=(screen.get_width() // 2 + 120 + glitch_offset, y_offset))
                text_rect3 = text_surface3.get_rect(center=(screen.get_width() // 2 + 120 - glitch_offset, y_offset + 2))
                text_rect4 = text_surface4.get_rect(center=(screen.get_width() // 2 + 120, y_offset - 2))

                screen.blit(text_surface1, text_rect1)

                # Randomly show/hide glitch layers
                if random.random() > 0.5:
                    screen.blit(text_surface2, text_rect2)
                if random.random() > 0.5:
                    screen.blit(text_surface3, text_rect3)
                if random.random() > 0.5:
                    screen.blit(text_surface4, text_rect4)

                glitch_offset = random.randint(-5, 5)  # Randomize glitch offset
            else:
                text_surface = instructions_font.render(" ".join(line), True, (255, 255, 255))
                text_rect = text_surface.get_rect(center=(screen.get_width() // 2, y_offset))
                screen.blit(text_surface, text_rect)
            y_offset += 50

        pygame.display.update()

    display_instructions()

    # Wait for the player to press any key to start
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                waiting = False
                intro_music.stop()  # Stop the intro music when instructions end
                play_main_music()  # Start the main music after instructions
        display_instructions()

    # Caption and Icon
    pygame.display.set_caption("Space Invader")
    icon = pygame.image.load('bill_cipher.png')
    icon = pygame.transform.scale(icon, (50, 50)) 
    pygame.display.set_icon(icon)

    # Player
    playerImg = pygame.image.load('mabel_and_dipper.png')
    playerImg = pygame.transform.scale(playerImg, (100, 200))  # Resize the image to 200x200 pixels
    playerX = (screen.get_width() - 200) // 2  # Center horizontally
    playerY = screen.get_height() - 220  # Position near the bottom
    playerX_change = 0

    # Enemy
    enemyImg = []
    enemyX = []
    enemyY = []
    enemyX_change = []
    enemyY_change = []
    enemySize = []  # List to store enemy sizes
    num_of_enemies = 6

    def spawn_enemies(count=5):
        nonlocal enemyImg, enemyX, enemyY, enemyX_change, enemyY_change, enemySize  # Ensure variables are accessible
        for _ in range(count):
            original_enemy_img = pygame.image.load('bill_cipher.png')
            size = random.randint(150, 200)  # Increased size range for enemies
            enemyImg.append(pygame.transform.scale(original_enemy_img, (size, size)))
            enemyX.append(random.randint(0, screen.get_width() - size))  # Adjust to fit screen width
            enemyY.append(random.randint(50, 150))  # Ensure enemies appear near the top
            enemyX_change.append(random.choice([6, 7, 8, 9]))  # Increased speed for horizontal movement
            enemyY_change.append(40)
            enemySize.append(size)

    spawn_enemies(num_of_enemies)

    # Bullet
    # Ready - You can't see the bullet on the screen
    # Fire - The bullet is currently moving
    bulletImg = pygame.image.load('nyan_cat.png')
    bulletImg = pygame.transform.scale(bulletImg, (140, 140))  # Slightly increased bullet size
    bulletX = 0
    bulletY = playerY  # Ensure playerY is defined
    bulletX_change = 0
    bulletY_change = 10
    bullet_state = "ready"

    # Score
    score_value = 0
    font = pygame.font.Font('freesansbold.ttf', 32)
    textX = 10
    testY = 10

    # Game Over
    over_font = pygame.font.Font('freesansbold.ttf', 64)
        
    def show_score(x, y):
        score = font.render("Score : " + str(score_value), True, (255, 255, 255))
        screen.blit(score, (x, y))

    def game_over_text():
        over_text = over_font.render("GAME OVER", True, (255, 255, 255))
        screen.blit(over_text, (screen.get_width() // 2 - over_text.get_width() // 2, screen.get_height() // 2 - over_text.get_height() // 2))
        pygame.display.update()
        pygame.time.wait(3000)  # Wait for 3 seconds before exiting

    def player(x, y):
        screen.blit(playerImg, (x, y))

    def enemy(x, y, i):
        screen.blit(enemyImg[i], (x, y))

    def fire_bullet(x, y):
        global bullet_state  # Use global instead of nonlocal
        bullet_state = "fire"
        screen.blit(bulletImg, (x + 16, y + 10))

    def isCollision(enemyX, enemyY, bulletX, bulletY, size):
        distance = math.sqrt(math.pow(enemyX - bulletX, 2) + (math.pow(enemyY - bulletY, 2)))
        return distance < size // 2  # Adjust collision detection based on enemy size

    def isGameOver(enemyX, enemyY, playerX, playerY):
        # Check if enemy hits the player
        player_collision_distance = 50  # Adjust based on player size
        distance = math.sqrt(math.pow(enemyX - playerX, 2) + (math.pow(enemyY - playerY, 2)))
        if distance < player_collision_distance:
            return True
        return False
    
    def win_game_text(screen):
        over_font = pygame.font.Font('freesansbold.ttf', 64)  # Define over_font
        win_text = over_font.render("YOU SAVED THE TOWN!", True, (0, 255, 0))
        screen.blit(win_text, (screen.get_width() // 2 - win_text.get_width() // 2, screen.get_height() // 2 - win_text.get_height() // 2))
        pygame.display.update()
        win_sound = mixer.Sound("win_sound.wav")
        win_sound.set_volume(0.3)  # Adjust volume if needed
        win_sound.play()
        pygame.time.wait(3000)  # Wait for 3 seconds before exiting

    def pixelated_burst(x, y):
        # Create a pixelated burst effect
        particles = []
        for _ in range(50):  # Number of particles
            particle_x = x + random.randint(-20, 20)
            particle_y = y + random.randint(-20, 20)
            particle_size = random.randint(2, 5)
            particle_color = random.choice([(255, 0, 0), (255, 255, 0), (255, 165, 0)])  # Red, Yellow, Orange
            particle_velocity = [random.uniform(-2, 2), random.uniform(-2, 2)]  # Random velocity for particles
            particles.append((particle_x, particle_y, particle_size, particle_color, particle_velocity))
        return particles

    def draw_particles(particles):
        for particle in particles[:]:  # Iterate over a copy of the list
            pygame.draw.rect(screen, particle[3], (particle[0], particle[1], particle[2], particle[2]))
            # Update particle position based on velocity
            particle[0] += particle[4][0]
            particle[1] += particle[4][1]
            # Reduce particle size to simulate fading
            particle[2] -= 0.1
            if particle[2] <= 0:  # Remove particle if it becomes too small
                particles.remove(particle)

    # Game Loop
    running = True
    active_particles = []  # List to store active particles
    while running:
        # RGB = Red, Green, Blue
        screen.fill((0, 0, 0))

        if 'background' in locals() or 'background' in globals():  # Ensure background is loaded
            background = pygame.image.load('background.png')  # Load background if not already loaded
            background = pygame.transform.scale(background, (screen.get_width(), screen.get_height()))
            screen.blit(background, (0, 0))
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            # if keystroke is pressed check whether its right or left
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    playerX_change = -5
                if event.key == pygame.K_RIGHT:
                    playerX_change = 5

                if event.key == pygame.K_SPACE:
                    if bullet_state == "ready":
                        bulletSound = mixer.Sound("laser.wav")
                        bulletSound.set_volume(0.2)  # Set the volume to make the laser quieter
                        bulletSound.play()
                        fire_bullet(playerX, bulletY)  # Use playerX for bulletX

                if event.key == pygame.K_ESCAPE:  # Exit the game when ESC is pressed
                    running = False

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                    playerX_change = 0

        playerX += playerX_change
        if playerX <= 0:
            playerX = 0
        elif playerX >= screen.get_width() - 100:
            playerX = screen.get_width() - 100

        for i in range(len(enemyX)):  # Loop through enemies
            if isGameOver(enemyX[i], enemyY[i], playerX, playerY):
                game_over_text()
                running = False
                break

            enemyX[i] += enemyX_change[i]
            if enemyX[i] <= 0:
                enemyX_change[i] = random.choice([6, 7, 8, 9])  # Randomize speed when changing direction
                enemyY[i] += enemyY_change[i]
            elif enemyX[i] >= screen.get_width() - enemySize[i]:
                enemyX_change[i] = -random.choice([6, 7, 8, 9])  # Randomize speed when changing direction
            collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY, enemySize[i])

            if collision:
                explosionSound = mixer.Sound("explosion.wav")
                explosionSound.set_volume(0.3)
                explosionSound.play()
                active_particles.extend(pixelated_burst(enemyX[i], enemyY[i]))  # Add particles to active list
                score_value += 1
                enemyY[i] = random.randint(50, 150)
                enemySize[i] = random.randint(150, 200)  # Reassign a new size for the enemy
                enemyX_change[i] = random.choice([6, 7, 8, 9])
            enemy(enemyX[i], enemyY[i], i)

        if bulletY <= 0:
            bulletY = playerY
            bullet_state = "ready"
        if bullet_state == "fire":
            bulletY -= bulletY_change
            fire_bullet(bulletX, bulletY)

        player(playerX, playerY)
        show_score(textX, testY)

if __name__ == "__main__":
    main()
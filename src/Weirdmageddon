import math
import random
import pygame
from pygame import mixer
import os

def main():
    # Initialize pygame
    pygame.init()

    # Set up the screen
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
    clock = pygame.time.Clock()

    # Load assets with error handling
    def load_asset(path, asset_type="image"):
        try:
            if asset_type == "image":
                return pygame.image.load(path)
            elif asset_type == "sound":
                return mixer.Sound(path)
            elif asset_type == "music":
                mixer.music.load(path)
        except pygame.error as e:
            print(f"Error loading {asset_type} at {path}: {e}")
            exit()

    # Load background
    background_path = os.path.join(os.getcwd(), "background.png")
    background = load_asset(background_path)
    background = pygame.transform.scale(background, (screen.get_width(), screen.get_height()))

    # Sound setup
    intro_music = load_asset(os.path.join(os.getcwd(), "intro_music.wav"), "sound")
    gf_themesong = os.path.join(os.getcwd(), "gf_themesong.wav")
    explosion_sound = load_asset(os.path.join(os.getcwd(), "explosion.wav"), "sound")
    laser_sound = load_asset(os.path.join(os.getcwd(), "laser.wav"), "sound")

    def play_music(path, loop=-1, volume=0.2):
        mixer.music.load(path)
        mixer.music.set_volume(volume)
        mixer.music.play(loop)

    def stop_music():
        mixer.music.stop()

    # Display instructions
    def display_instructions():
        instructions_font = pygame.font.Font('freesansbold.ttf', 32)
        instructions_text = [
            "Welcome to Weirdmageddon!",
            "Use LEFT and RIGHT arrow keys to move.",
            "Press SPACE to shoot.",
            "Press any key to start the game."
        ]

        screen.fill((0, 0, 0))
        screen.blit(background, (0, 0))
        y_offset = (screen.get_height() - len(instructions_text) * 50) // 2

        for line in instructions_text:
            text_surface = instructions_font.render(line, True, (255, 255, 255))
            text_rect = text_surface.get_rect(center=(screen.get_width() // 2, y_offset))
            screen.blit(text_surface, text_rect)
            y_offset += 50

        pygame.display.update()

    # Show instructions and wait for key press
    intro_music.play()
    display_instructions()
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                waiting = False
                intro_music.stop()
                play_music(gf_themesong)

    # Load player
    playerImg = load_asset(os.path.join(os.getcwd(), "mabel_and_dipper.png"))
    playerX = (screen.get_width() - 200) // 2
    playerY = screen.get_height() - 220
    playerX_change = 0

    # Enemy setup
    enemyImg = load_asset(os.path.join(os.getcwd(), "bill_cipher.png"))
    enemies = []
    num_of_enemies = 6

    def spawn_enemies():
        for _ in range(num_of_enemies):
            size = random.randint(150, 200)
            enemies.append({
                "img": pygame.transform.scale(enemyImg, (size, size)),
                "x": random.randint(0, screen.get_width() - size),
                "y": random.randint(50, 150),
                "x_change": random.choice([6, 7, 8, 9]),
                "y_change": 40,
                "size": size,
            })

    spawn_enemies()

    # Bullet setup
    bulletImg = load_asset(os.path.join(os.getcwd(), "nyan_cat.png"))
    bulletX = 0
    bulletY = playerY
    bulletY_change = 10
    bullet_state = "ready"

    # Score setup
    score = 0
    font = pygame.font.Font('freesansbold.ttf', 32)

    def show_score():
        score_text = font.render(f"Score : {score}", True, (255, 255, 255))
        screen.blit(score_text, (10, 10))

    # Game Over
    def game_over():
        over_font = pygame.font.Font('freesansbold.ttf', 64)
        over_text = over_font.render("GAME OVER", True, (255, 255, 255))
        screen.blit(over_text, (screen.get_width() // 2 - over_text.get_width() // 2, screen.get_height() // 2 - over_text.get_height() // 2))
        pygame.display.update()
        pygame.time.wait(3000)
        pygame.quit()
        exit()

    # Fire bullet
    def fire_bullet(x, y):
        global bullet_state
        bullet_state = "fire"
        screen.blit(bulletImg, (x + 16, y + 10))

    # Check collision
    def is_collision(enemy, bulletX, bulletY):
        distance = math.sqrt(math.pow(enemy["x"] - bulletX, 2) + math.pow(enemy["y"] - bulletY, 2))
        return distance < enemy["size"] // 2

    # Game loop
    running = True
    while running:
        screen.fill((0, 0, 0))
        screen.blit(background, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    playerX_change = -5
                if event.key == pygame.K_RIGHT:
                    playerX_change = 5
                if event.key == pygame.K_SPACE and bullet_state == "ready":
                    laser_sound.play()
                    bulletX = playerX
                    fire_bullet(bulletX, bulletY)

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                    playerX_change = 0

        # Player movement
        playerX += playerX_change
        playerX = max(0, min(screen.get_width() - 100, playerX))  # Keep player within bounds

        # Enemy movement
        for enemy in enemies:
            enemy["x"] += enemy["x_change"]
            if enemy["x"] <= 0 or enemy["x"] >= screen.get_width() - enemy["size"]:
                enemy["x_change"] *= -1
                enemy["y"] += enemy["y_change"]

            # Collision
            if is_collision(enemy, bulletX, bulletY):
                explosion_sound.play()
                bullet_state = "ready"
                bulletY = playerY
                score += 1
                enemy["x"] = random.randint(0, screen.get_width() - enemy["size"])
                enemy["y"] = random.randint(50, 150)

            # Game over
            if enemy["y"] > playerY:
                game_over()

            screen.blit(enemy["img"], (enemy["x"], enemy["y"]))

        # Bullet movement
        if bullet_state == "fire":
            fire_bullet(bulletX, bulletY)
            bulletY -= bulletY_change

        if bulletY <= 0:
            bulletY = playerY
            bullet_state = "ready"

        # Draw player and score
        screen.blit(playerImg, (playerX, playerY))
        show_score()

        pygame.display.update()
        clock.tick(60)

if __name__ == "__main__":
    main()
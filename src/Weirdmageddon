import math
import random
import pygame
from pygame import mixer
from PIL import Image
import os

def main():

    # Initialize the pygame
    pygame.init()

    # Set the game to full screen
    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)

    background = pygame.image.load(os.path.join("background1.png"))
    new_width = int(screen.get_width())
    new_height = int(screen.get_height())
    background = pygame.transform.scale(background, (new_width, new_height))
    screen.blit(background, (0, 0))
    pygame.display.update()

    # Sound
    def play_main_music():
        mixer.music.load(os.path.join("gf_themesong.wav"))  
        mixer.music.play(-1)
        mixer.music.set_volume(0.2)

    # Play intro music
    intro_music = mixer.Sound(os.path.join("intro_music.wav"))  
    intro_music.play()

    # Display instructions before the game starts
    instructions_font = pygame.font.Font('freesansbold.ttf', 32)
    hoefler_font_path = os.path.join("fonts", "HoeflerText.ttf")  # Ensure the font file is in a 'fonts' folder
    hoefler_font = pygame.font.Font(hoefler_font_path, 32) if os.path.exists(hoefler_font_path) else instructions_font

    instructions_text = [
        ("Welcome to ", "Weirdmageddon!"),
        ("Use LEFT and RIGHT arrow keys to move.", ""),
        ("Press SPACE to shoot.", ""),
        ("Press any key to start the game.", "")
    ]

    def display_instructions():
        screen.fill((0, 0, 0))
        screen.blit(background, (0, 0))  # Display the background image
        y_offset = (screen.get_height() - len(instructions_text) * 50) // 2  # Center vertically
        glitch_offset = 0  # Offset for glitch effect
        for line in instructions_text:
            if "Weirdmageddon" in line[1]:
                # Render "Weirdmageddon" with Hoefler Text font and add glitch effect
                text_surface1 = instructions_font.render(line[0], True, (255, 255, 255))
                text_surface2 = hoefler_font.render(line[1], True, (255, 0, 0))  # Red for glitch effect
                text_surface3 = hoefler_font.render(line[1], True, (0, 255, 0))  # Green for glitch effect
                text_surface4 = hoefler_font.render(line[1], True, (0, 0, 255))  # Blue for glitch effect

                text_rect1 = text_surface1.get_rect(center=(screen.get_width() // 2 - 120, y_offset))  # Adjusted position
                text_rect2 = text_surface2.get_rect(center=(screen.get_width() // 2 + 120 + glitch_offset, y_offset))
                text_rect3 = text_surface3.get_rect(center=(screen.get_width() // 2 + 120 - glitch_offset, y_offset + 2))
                text_rect4 = text_surface4.get_rect(center=(screen.get_width() // 2 + 120, y_offset - 2))

                screen.blit(text_surface1, text_rect1)

                # Randomly show/hide glitch layers
                if random.random() > 0.5:
                    screen.blit(text_surface2, text_rect2)
                if random.random() > 0.5:
                    screen.blit(text_surface3, text_rect3)
                if random.random() > 0.5:
                    screen.blit(text_surface4, text_rect4)

                glitch_offset = random.randint(-5, 5)  # Randomize glitch offset
            else:
                text_surface = instructions_font.render(" ".join(line), True, (255, 255, 255))
                text_rect = text_surface.get_rect(center=(screen.get_width() // 2, y_offset))
                screen.blit(text_surface, text_rect)
            y_offset += 50

        pygame.display.update()

    display_instructions()

    # Wait for the player to press any key to start
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.KEYDOWN:
                waiting = False
                intro_music.stop()  # Stop the intro music when instructions end
                play_main_music()  # Start the main music after instructions
                break  # Exit the loop immediately
        keys = pygame.key.get_pressed()
        if any(keys):  # Quit instructions if any key is pressed
            waiting = False
            intro_music.stop()
            play_main_music()
            break
        display_instructions()

    # Caption and Icon
    pygame.display.set_caption("Weirdmageddon")
    icon = pygame.image.load("bill_cipher.png")
    pygame.display.set_icon(icon)

    # Player
    playerImg = pygame.image.load(os.path.join("mabel_and_dipper.png"))  
    playerX = (screen.get_width() - 200) // 2  # Center horizontally
    playerY = screen.get_height() - 220  # Position near the bottom
    playerX_change = 0

    # Enemy
    enemyImg = []
    enemyX = []
    enemyY = []
    enemyX_change = []
    enemyY_change = []
    enemySize = []  # List to store enemy sizes
    num_of_enemies = 6

    def spawn_enemies(count=5):
        nonlocal enemyImg, enemyX, enemyY, enemyX_change, enemyY_change, enemySize  # Ensure variables are accessible
        for _ in range(count):
            size = random.randint(150, 200)  # Increased size range for enemies
            enemyX.append(random.randint(0, screen.get_width() - size))  # Adjust to fit screen width
            enemyY.append(random.randint(50, 150))  
            enemyX_change.append(random.choice([6, 7, 8, 9]))  # Increased speed for horizontal movement
            enemyY_change.append(40)
            enemySize.append(size)
            enemyImg.append(pygame.image.load(os.path.join("bill_cipher.png")))  # Ensure the file is in an 'assets' folder

    spawn_enemies(num_of_enemies)

    # Bullet
    bulletImg = pygame.image.load("nyan_cat.png") 
    bulletX = 0
    bulletY = playerY  # Ensure playerY is defined
    bulletY_change = 10
    bullet_state = "ready"

    score_value = 0
    font = pygame.font.Font('freesansbold.ttf', 32)
    textX = 10
    testY = 10

    # Game Over
    over_font = pygame.font.Font('freesansbold.ttf', 64)
        
    def show_score(x, y):
        score = font.render("Score : " + str(score_value), True, (255, 255, 255))
        screen.blit(score, (x, y))

    def game_over_text():
        over_text = over_font.render("GAME OVER", True, (255, 255, 255))
        screen.blit(over_text, (screen.get_width() // 2 - over_text.get_width() // 2, screen.get_height() // 2 - over_text.get_height() // 2))
        pygame.display.update()
        pygame.time.wait(3000)  # Wait for 3 seconds before exiting

    def player(x, y):
        screen.blit(playerImg, (x, y))

    def enemy(x, y, i):
        screen.blit(enemyImg[i], (x, y))

    def fire_bullet(x, y):
        global bullet_state  # Use global instead of nonlocal
        bullet_state = "fire"
        screen.blit(bulletImg, (x + 16, y + 10))

    def isCollision(enemyX, enemyY, bulletX, bulletY, size):
        distance = math.sqrt(math.pow(enemyX - bulletX, 2) + (math.pow(enemyY - bulletY, 2)))
        return distance < size // 2  # Adjust collision detection based on enemy size

    def isGameOver(enemyX, enemyY, playerX, playerY):
        player_collision_distance = 50  # Adjust based on player size
        distance = math.sqrt(math.pow(enemyX - playerX, 2) + (math.pow(enemyY - playerY, 2)))
        return distance < player_collision_distance
    
    def pixelated_burst(x, y):
        particles = []
        for _ in range(20):  # Number of particles
            particle = {
                "x": x,
                "y": y,
                "x_speed": random.uniform(-5, 5),  # Random horizontal speed
                "y_speed": random.uniform(-5, 5),  # Random vertical speed
                "size": random.randint(2, 5),  # Random size
                "color": (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)),  # Random color
                "lifetime": random.randint(20, 50)  # Lifetime of the particle
            }
            particles.append(particle)
        return particles

    active_particles = []

    running = True
    while running:
        screen.fill((0, 0, 0))
        screen.blit(background, (0, 0))  # Use the preloaded background image
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    playerX_change = -5
                if event.key == pygame.K_RIGHT:
                    playerX_change = 5
                if event.key == pygame.K_SPACE:
                    if bullet_state == "ready":
                        bulletSound = mixer.Sound("laser.wav")  # Ensure the file is in an 'assets' folder
                        bulletSound.set_volume(0.2)
                        bulletSound.play()
                        fire_bullet(playerX, bulletY)
                if event.key == pygame.K_ESCAPE:
                    running = False

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                    playerX_change = 0

        playerX += playerX_change
        if playerX <= 0:
            playerX = 0
        elif playerX >= screen.get_width() - 100:
            playerX = screen.get_width() - 100

        for i in range(len(enemyX)):
            if isGameOver(enemyX[i], enemyY[i], playerX, playerY):
                game_over_text()
                running = False
                break

            enemyX[i] += enemyX_change[i]
            if enemyX[i] <= 0:
                enemyX_change[i] = random.choice([6, 7, 8, 9])
                enemyY[i] += enemyY_change[i]
            elif enemyX[i] >= screen.get_width() - enemySize[i]:
                enemyX_change[i] = -random.choice([6, 7, 8, 9])
            collision = isCollision(enemyX[i], enemyY[i], bulletX, bulletY, enemySize[i])

            if collision:
                explosionSound = mixer.Sound(os.path.join("explosion.wav"))  
                explosionSound.set_volume(0.3)
                explosionSound.play()
                active_particles.extend(pixelated_burst(enemyX[i], enemyY[i]))
                score_value += 1
                enemyY[i] = random.randint(50, 150)
                enemySize[i] = random.randint(150, 200)
                enemyX_change[i] = random.choice([6, 7, 8, 9])
            enemy(enemyX[i], enemyY[i], i)

        if bulletY < 0:

            if collision:
                explosionSound = mixer.Sound(os.path.join("explosion.wav"))  
                explosionSound.set_volume(0.3)
                explosionSound.play()
                active_particles.extend(pixelated_burst(enemyX[i], enemyY[i]))  # Add particles to active list
                score_value += 1
                enemyY[i] = random.randint(50, 150)
                enemySize[i] = random.randint(150, 200)  # Reassign a new size for the enemy
                enemyX_change[i] = random.choice([6, 7, 8, 9])
            enemy(enemyX[i], enemyY[i], i)

        if bulletY <= 0:
            bulletY = playerY
            bullet_state = "ready"
        if bullet_state == "fire":
            bulletY -= bulletY_change
            fire_bullet(bulletX, bulletY)

        player(playerX, playerY)
        show_score(textX, testY)

if __name__ == "__main__":
    main()